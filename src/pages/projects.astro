---
import Layout from '../layouts/Layout.astro';
import Item from '../components/Item.astro';
import ProjectPopup from '../components/ProjectPopup.astro';
import "../style/nav_footer.css";
import "../style/index_style.css";
import "../style/projects_page.css"
import { turso, rowsToObject } from "../scripts/db.js";

// Import database tables
const plants = rowsToObject(await turso.execute('SELECT * FROM plant JOIN plantSpecies ON plantSpecies.id = plant.speciesID'))
const animals = rowsToObject(await turso.execute('SELECT * FROM animal JOIN animalSpecies ON animalSpecies.id = animal.speciesID'))
const myprojects = rowsToObject(await turso.execute('SELECT * FROM project'))
const equipment = rowsToObject(await turso.execute('SELECT * FROM equipment JOIN equipmentType ON equipmentType.id = equipment.typeID'))

// Initialize types
const planttypes = rowsToObject(await turso.execute('SELECT DISTINCT genus FROM plantSpecies'))
const animaltypes = rowsToObject(await turso.execute('SELECT DISTINCT genus FROM animalSpecies'))
const myprojecttypes = rowsToObject(await turso.execute('SELECT DISTINCT type FROM project'))
const equipmenttypes = rowsToObject(await turso.execute('SELECT DISTINCT type FROM equipmentType'))
---

<Layout title="See's Garten">
	<main>
		<!-- "Navigationbar" for filtering projects -->
		<div class="container project-nav">
			<div class="project-nav-content">
				<li class="dropdown">
					<a class="all" href="projects#/all">All</a>
				</li>

				<!-- Dropdown for types of plants -->
				<li class="dropdown">
					<a class="plants" href="projects#/plants">Plants</a>
					<div class="dropdown-content">
						{planttypes.map(({ genus }) => (
							<a href={"projects#/plants/" + genus}>{genus}</a>
						))}
					</div>
				</li>

				<!-- Dropdown for types of animals -->
				<li class="dropdown">
					<a class="animals" href="projects#/animals">Animals</a>
					<div class="dropdown-content">
						{animaltypes.map(({ genus }) => (
							<a href={"projects#/animals/" + genus}>{genus}</a>
						))}
					</div>
				</li>

				<!-- Dropdown for types of projects -->
				<li class="dropdown">
					<a class="projects" href="projects#/projects">Projects</a>
					<div class="dropdown-content">
						{myprojecttypes.map(({ type }) => (
							<a href={"projects#/projects/" + type}>{type}</a>
						))}
					</div>
				</li>

				<!-- Dropdown for types of equipment -->
				<li class="dropdown">
					<a class="equipment" href="projects#/equipment">Equipment</a>
					<div class="dropdown-content">
						{equipmenttypes.map(({ type }) => (
							<a href={"projects#/equipment/" + type}>{type}</a>
						))}
					</div>
				</li>
			</div>

			<!-- Button to open popup to add new project to database -->
			<button data-projectAdd-button type="button" id="project-nav-add">
				+
			</button>

			<!-- Show popup at button click -->
			<script>
				const buttons = document.querySelectorAll('[data-projectAdd-button]');
				buttons.forEach( (button) => {
					button.addEventListener('click', () => {
						const addPopup = document.getElementById("popupContainer");
						addPopup?.classList.remove("hidden");
					});
				})
			</script>
		</div>

		<div class="container">

			<!-- Container with popup inside initially hidden -->
			<div id="popupContainer" class="hidden">
				<ProjectPopup id="addPopup"></ProjectPopup>
			</div>

			<ul role="list" class="projects_items">
				<!-- List all plants -->
				{plants.map(({ id, name, genus }) => (
					<Item
						href={`/projects/${name.toLowerCase().replace(/[\s_-]+/g, '-')}-plants-${id}`}
						title={name}
						type={genus}
						img="/images/plants/Monstera Deliciosa.png"
						itemType='plantsItem'
						/>
				))}

				<!-- List all animals -->
				{animals.map(({ id, name, genus }) => (
					<Item
						href={`/projects/${name.toLowerCase().replace(/[\s_-]+/g, '-')}-animals-${id}`}
						title={name}
						type={genus}
						img="/images/plants/Monstera Deliciosa.png"
						itemType='animalsItem'
					/>
				))}

				<!-- List all projects -->
				{myprojects.map(({ id, name, type}) => (
					<Item
						href={`/projects/${name.toLowerCase().replace(/[\s_-]+/g, '-')}-myprojects-${id}`}
						title={name}
						type={type}
						img="/images/plants/Monstera Deliciosa.png"
						itemType='myprojectsItem'
					/>
				))}

				<!-- List all equipment -->
				{equipment.map(({ id, name, type}) => (
					<Item
						href={`/projects/${name.toLowerCase().replace(/[\s_-]+/g, '-')}-equipment-${id}`}
						title={name}
						type={type}
						img="/images/plants/Monstera Deliciosa.png"
						itemType='equipmentItem'
					/>
				))}
			</ul>
		</div>
		
		<!--Filter projects based on link-->
		<script>
			function filterProjectsByPath() {
				var path = window.location.hash
				var parts = path.split("/")
				var category = parts[1]
				var type = parts[2]
				
				var items = document.querySelectorAll('.link-card')
				var shown = new Set<Element>()
				if (category=='all'){
					items.forEach(item => item.classList.remove('hidden'))
				} else{
					items.forEach(item => item.classList.add('hidden'))
			
					switch (category) {
						case'plants':
							items.forEach(item => {
								if (item.id == 'plantsItem') {
									item.classList.remove('hidden')
									shown.add(item)
								}
							})
							break
						case 'animals':
							items.forEach(item => {
								if (item.id == 'animalsItem') {
									item.classList.remove('hidden')
									shown.add(item)
								}
							})
							break
						case 'projects':
							items.forEach(item => {
								if (item.id == 'myprojectsItem') {
									item.classList.remove('hidden')
									shown.add(item)
								}
							})
							break
						case 'equipment':
							items.forEach(item => {
								if (item.id == 'equipmentItem') {
									item.classList.remove('hidden')
									shown.add(item)
								}
							})
							break
					}

					if (typeof type !== 'undefined'){
						shown.forEach(item => {
						if (!item.classList.contains(type)){
							item.classList.add('hidden')
						}
						})
					}
				}
			}
			filterProjectsByPath()

			// Refresh list on popstate
			window.addEventListener('popstate', filterProjectsByPath);
		</script>
	</main>
</Layout>